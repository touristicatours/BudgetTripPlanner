'use client'

import { useState } from 'react'
import Link from 'next/link'
import { 
  FileText, 
  Share2, 
  Download, 
  RefreshCw,
  Cloud,
  PieChart,
  Users,
  Sparkles,
  Eye,
  MapPin,
  Calendar,
  DollarSign,
  ArrowRight,
  CheckCircle,
  Star,
  TrendingUp,
  Zap
} from 'lucide-react'

export default function DemoTripPage() {
  const [activeTab, setActiveTab] = useState('overview')
  const [showInvoice, setShowInvoice] = useState(false)
  const [showWeather, setShowWeather] = useState(false)
  const [showBudget, setShowBudget] = useState(false)
  const [showSplit, setShowSplit] = useState(false)

  const demoTrip = {
    id: 'demo-trip-123',
    destination: 'Paris, France',
    startDate: '2024-06-15',
    endDate: '2024-06-22',
    travelers: 2,
    budget: 2500,
    currency: 'EUR',
    itinerary: [
      {
        day: 1,
        title: 'Day 1 - Arrival & Eiffel Tower',
        activities: [
          { time: '10:00 AM', name: 'Arrive at CDG Airport', cost: '‚Ç¨0' },
          { time: '12:00 PM', name: 'Check-in at Hotel', cost: '‚Ç¨150' },
          { time: '3:00 PM', name: 'Eiffel Tower Visit', cost: '‚Ç¨26' },
          { time: '7:00 PM', name: 'Dinner at Local Bistro', cost: '‚Ç¨45' }
        ]
      },
      {
        day: 2,
        title: 'Day 2 - Louvre & Seine Cruise',
        activities: [
          { time: '9:00 AM', name: 'Louvre Museum', cost: '‚Ç¨17' },
          { time: '2:00 PM', name: 'Seine River Cruise', cost: '‚Ç¨15' },
          { time: '6:00 PM', name: 'Champs-√âlys√©es Walk', cost: '‚Ç¨0' },
          { time: '8:00 PM', name: 'Arc de Triomphe', cost: '‚Ç¨13' }
        ]
      }
    ]
  }

  const weatherData = {
    current: { temp: 22, condition: 'Sunny', icon: '‚òÄÔ∏è' },
    forecast: [
      { day: 'Today', temp: 22, condition: 'Sunny' },
      { day: 'Tomorrow', temp: 19, condition: 'Partly Cloudy' },
      { day: 'Day 3', temp: 24, condition: 'Sunny' },
      { day: 'Day 4', temp: 18, condition: 'Rain' }
    ]
  }

  const budgetData = {
    total: 2500,
    spent: 1200,
    remaining: 1300,
    categories: [
      { name: 'Accommodation', amount: 600, percentage: 50 },
      { name: 'Food & Dining', amount: 300, percentage: 25 },
      { name: 'Activities', amount: 200, percentage: 17 },
      { name: 'Transportation', amount: 100, percentage: 8 }
    ]
  }

  const splitData = {
    members: [
      { name: 'Alice', email: 'alice@example.com', paid: 600, owes: 0 },
      { name: 'Bob', email: 'bob@example.com', paid: 600, owes: 0 }
    ],
    totalExpenses: 1200,
    perPerson: 600
  }

  const generateInvoice = () => {
    setShowInvoice(true)
    setTimeout(() => {
      const invoiceContent = `
        INVOICE
        
        Trip: ${demoTrip.destination}
        Dates: ${demoTrip.startDate} to ${demoTrip.endDate}
        Travelers: ${demoTrip.travelers}
        
        EXPENSES:
        - Accommodation: ‚Ç¨600
        - Food & Dining: ‚Ç¨300
        - Activities: ‚Ç¨200
        - Transportation: ‚Ç¨100
        
        TOTAL: ‚Ç¨1,200
        
        Generated by TripWeaver
        Date: ${new Date().toLocaleDateString()}
      `
      
      const blob = new Blob([invoiceContent], { type: 'text/plain' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `invoice-${demoTrip.destination}.txt`
      a.click()
      URL.revokeObjectURL(url)
      setShowInvoice(false)
    }, 1000)
  }

  const duplicateTrip = () => {
    alert('Trip duplicated! You would be redirected to the new trip.')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{demoTrip.destination}</h1>
              <div className="flex items-center space-x-6 mt-2 text-gray-600">
                <div className="flex items-center">
                  <Calendar className="w-4 h-4 mr-2" />
                  {demoTrip.startDate} - {demoTrip.endDate}
                </div>
                <div className="flex items-center">
                  <Users className="w-4 h-4 mr-2" />
                  {demoTrip.travelers} travelers
                </div>
                <div className="flex items-center">
                  <DollarSign className="w-4 h-4 mr-2" />
                  {demoTrip.budget} {demoTrip.currency}
                </div>
              </div>
            </div>
            <div className="flex space-x-3">
              <button
                onClick={duplicateTrip}
                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <RefreshCw className="w-4 h-4 mr-2" />
                Remix Trip
              </button>
              <button
                onClick={generateInvoice}
                className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <FileText className="w-4 h-4 mr-2" />
                Generate Invoice
              </button>
            </div>
          </div>
        </div>

        {/* Feature Buttons */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          <button
            onClick={() => setShowWeather(!showWeather)}
            className="flex flex-col items-center p-6 bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow"
          >
            <Cloud className="w-8 h-8 text-blue-500 mb-2" />
            <span className="font-semibold">Weather</span>
            <span className="text-sm text-gray-500">Forecast</span>
          </button>

          <button
            onClick={() => setShowBudget(!showBudget)}
            className="flex flex-col items-center p-6 bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow"
          >
            <PieChart className="w-8 h-8 text-green-500 mb-2" />
            <span className="font-semibold">Budget</span>
            <span className="text-sm text-gray-500">Tracking</span>
          </button>

          <button
            onClick={() => setShowSplit(!showSplit)}
            className="flex flex-col items-center p-6 bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow"
          >
            <Users className="w-8 h-8 text-purple-500 mb-2" />
            <span className="font-semibold">Split</span>
            <span className="text-sm text-gray-500">Expenses</span>
          </button>

          <Link
            href="/plan"
            className="flex flex-col items-center p-6 bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow"
          >
            <Sparkles className="w-8 h-8 text-indigo-500 mb-2" />
            <span className="font-semibold">Plan New</span>
            <span className="text-sm text-gray-500">Trip</span>
          </Link>
        </div>

        {/* Weather Section */}
        {showWeather && (
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-2xl font-bold mb-4 flex items-center">
              <Cloud className="w-6 h-6 text-blue-500 mr-2" />
              Weather Forecast
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {weatherData.forecast.map((day, index) => (
                <div key={index} className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl mb-2">{day.condition === 'Sunny' ? '‚òÄÔ∏è' : day.condition === 'Rain' ? 'üåßÔ∏è' : '‚õÖ'}</div>
                  <div className="font-semibold">{day.day}</div>
                  <div className="text-2xl font-bold text-blue-600">{day.temp}¬∞C</div>
                  <div className="text-sm text-gray-600">{day.condition}</div>
                </div>
              ))}
            </div>
            <div className="mt-4 p-4 bg-blue-100 rounded-lg">
              <h3 className="font-semibold mb-2">Packing Suggestions:</h3>
              <ul className="text-sm space-y-1">
                <li>‚Ä¢ Light jacket for cooler evenings</li>
                <li>‚Ä¢ Comfortable walking shoes</li>
                <li>‚Ä¢ Umbrella for day 4</li>
                <li>‚Ä¢ Sunglasses and sunscreen</li>
              </ul>
            </div>
          </div>
        )}

        {/* Budget Section */}
        {showBudget && (
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-2xl font-bold mb-4 flex items-center">
              <PieChart className="w-6 h-6 text-green-500 mr-2" />
              Budget Tracking
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-green-600">‚Ç¨{budgetData.spent}</div>
                <div className="text-gray-600">Spent</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-blue-600">‚Ç¨{budgetData.remaining}</div>
                <div className="text-gray-600">Remaining</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-gray-600">‚Ç¨{budgetData.total}</div>
                <div className="text-gray-600">Total Budget</div>
              </div>
            </div>
            <div className="mt-6">
              <h3 className="font-semibold mb-3">Expense Breakdown:</h3>
              <div className="space-y-3">
                {budgetData.categories.map((category, index) => (
                  <div key={index} className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className="w-4 h-4 rounded-full mr-3" style={{ backgroundColor: ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'][index] }}></div>
                      <span>{category.name}</span>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className="w-32 bg-gray-200 rounded-full h-2">
                        <div 
                          className="h-2 rounded-full" 
                          style={{ 
                            width: `${category.percentage}%`,
                            backgroundColor: ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'][index]
                          }}
                        ></div>
                      </div>
                      <span className="font-semibold">‚Ç¨{category.amount}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Split Expenses Section */}
        {showSplit && (
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 className="text-2xl font-bold mb-4 flex items-center">
              <Users className="w-6 h-6 text-purple-500 mr-2" />
              Split Expenses
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold mb-3">Group Members:</h3>
                <div className="space-y-3">
                  {splitData.members.map((member, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div>
                        <div className="font-semibold">{member.name}</div>
                        <div className="text-sm text-gray-600">{member.email}</div>
                      </div>
                      <div className="text-right">
                        <div className="font-semibold">‚Ç¨{member.paid}</div>
                        <div className="text-sm text-green-600">Paid</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              <div>
                <h3 className="font-semibold mb-3">Settlement Summary:</h3>
                <div className="space-y-4">
                  <div className="p-4 bg-green-50 rounded-lg">
                    <div className="text-2xl font-bold text-green-600">‚Ç¨{splitData.totalExpenses}</div>
                    <div className="text-gray-600">Total Expenses</div>
                  </div>
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <div className="text-2xl font-bold text-blue-600">‚Ç¨{splitData.perPerson}</div>
                    <div className="text-gray-600">Per Person</div>
                  </div>
                  <div className="p-4 bg-purple-50 rounded-lg">
                    <div className="text-lg font-semibold text-purple-600">‚úÖ All Settled</div>
                    <div className="text-gray-600">No outstanding payments</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Itinerary */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-2xl font-bold mb-6">Your Itinerary</h2>
          <div className="space-y-6">
            {demoTrip.itinerary.map((day, index) => (
              <div key={index} className="border-l-4 border-indigo-500 pl-6">
                <h3 className="text-xl font-semibold mb-3">{day.title}</h3>
                <div className="space-y-3">
                  {day.activities.map((activity, actIndex) => (
                    <div key={actIndex} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center">
                        <div className="w-16 text-sm text-gray-500">{activity.time}</div>
                        <div className="font-medium">{activity.name}</div>
                      </div>
                      <div className="text-green-600 font-semibold">{activity.cost}</div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Action Buttons */}
        <div className="mt-8 flex flex-wrap gap-4 justify-center">
          <Link
            href="/plan"
            className="flex items-center px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
          >
            <Sparkles className="w-5 h-5 mr-2" />
            Plan Your Own Trip
          </Link>
          <button
            onClick={() => navigator.clipboard.writeText(window.location.href)}
            className="flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Share2 className="w-5 h-5 mr-2" />
            Share This Trip
          </button>
          <button
            onClick={generateInvoice}
            className="flex items-center px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            <Download className="w-5 h-5 mr-2" />
            Download Invoice
          </button>
        </div>
      </div>
    </div>
  )
}
